<?php
// vim: set filetype=php:

/**
Implementation of hook_perm()
*/
function profile_generator_perm() {
    return array(
        'profile_generator generate',
    );
}

/**
Implementation of hook_menu();
*/
function profile_generator_menu() {
    $items = array();

    $items[] = array(
        'path' => 'admin/settings/profile-generator',
        'title' => t('Generate installation profile'),
        'description' => t('Generate a Drupal installation profile'),
        'callback' => 'drupal_get_form',
        'callback arguments' => 'profile_generator_form',
        'access' => user_access('profile_generator generate'),
        'type' => MENU_NORMAL_ITEM,
    );

    return $items;
}

function profile_generator_form($form_values = null) {
    $form['title'] = array(
        '#type' => 'textfield',
        '#title' => t('Profile Title'),
        '#required' => TRUE,
        '#default_value' => t('Generated'),
        '#weight' => 0,
    );
    $form['description'] = array(
        '#type' => 'textarea',
        '#title' => t('Profile Description'),
        '#required' => TRUE,
        '#default_value' => t('Installation profile generated automatically on !date', array('!date' => date('jS M Y h:ia'))),
        '#weight' => 1,
    );
    $form['name'] = array(
        '#type' => 'textfield',
        '#title' => t('Profile Name (can only contain a-z and _)'),
        '#required' => TRUE,
        '#default_value' => t('generated'),
        '#weight' => 2,
    );
    $form['export_nodetypes'] = array(
        '#type' => 'checkbox',
        '#title' => t('Export custom node types'),
        '#default_value' => TRUE,
        '#weight' => 3,
    );
    $form['export_roles'] = array(
        '#type' => 'checkbox',
        '#title' => t('Export roles'),
        '#default_value' => TRUE,
        '#weight' => 4,
    );
    $form['export_users'] = array(
        '#type' => 'checkbox',
        '#title' => t('Export users'),
        '#default_value' => TRUE,
        '#weight' => 5,
    );
    $form['export_menus'] = array(
        '#type' => 'checkbox',
        '#title' => t('Export menus'),
        '#default_value' => TRUE,
        '#weight' => 6,
    );
    $form['export_blocks'] = array(
        '#type' => 'checkbox',
        '#title' => t('Export blocks'),
        '#default_value' => TRUE,
        '#weight' => 7,
    );
    $form['export_aliases'] = array(
        '#type' => 'checkbox',
        '#title' => t('Export URL aliases'),
        '#default_value' => TRUE,
        '#weight' => 8,
    );
    $form['nodes'] = array(
        '#weight' => 9,
        '#type' => 'fieldset',
        '#title' => t('Nodes to export'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
    );
    $query_result = db_query('SELECT * FROM {node_type}');
    while ($nodetype = db_fetch_object($query_result)) {
        if ($nodetype->custom) {
            $form['nodes']['node_' . $nodetype->type] = array(
                '#type' => 'checkbox',
                '#title' => $nodetype->name,
                '#default_value' => FALSE,
            );
        }
    }

    $form['download'] = array(
        '#type' => 'submit',
        '#submit' => TRUE,
        '#value' => t('Download'),
        '#weight' => 10,
    );
    $form['display'] = array(
        '#type' => 'submit',
        '#submit' => TRUE,
        '#value' => t('Display'),
        '#weight' => 10,
    );

    return $form;
}

function profile_generator_serialize($var, $spaces = 4) {
    return trim(preg_replace('/^/ms', str_repeat(' ', $spaces), var_export($var, true)));
}

function profile_generator_form_submit($form_name, $form_values) {  
    $profile_name = $form_values['name'];

    $modules = profile_generator_module_list();

    $details = array(
        'name' => $form_values['title'],
        'description' => $form_values['description'],
    );

    $postcode = '';
    $code = "<?php\n\n";

    $code .= "// vim: filetype=php\n\n";

    $code .= "/************************************************************\n";
    $code .= "*                           MODULES                         *\n";
    $code .= "************************************************************/\n";
    $code .= "function {$profile_name}_profile_modules() {\n";
    $code .= "    return ";
    $code .= profile_generator_serialize($modules, 6);
    $code .= ";\n";
    $code .= "}\n\n";

    $code .= "/************************************************************\n";
    $code .= "*                           DETAILS                         *\n";
    $code .= "************************************************************/\n";
    $code .= "function ${profile_name}_profile_details() {\n";
    $code .= "    return ";
    $code .= profile_generator_serialize($details, 6);
    $code .= ";\n";
    $code .= "}\n\n";

    $code .= "function ${profile_name}_profile_final() {\n";

    // variables (and theme)
    $query_result = db_query('SELECT name FROM {variable}');
    $code .= "/************************************************************\n";
    $code .= "*                          VARIABLES                        *\n";
    $code .= "************************************************************/\n";
    while ($variable = db_fetch_object($query_result)) {
        if (in_array($variable->name, array('install_profile', 'drupal_private_key', 'cron_last', 'content_schema_version'))) {
            continue;
        }
        $value = profile_generator_serialize(variable_get($variable->name, null), 4);
        switch ($variable->name) {
            case 'theme_default':
                $code .= "    system_theme_data();\n";
                $code .= "    db_query(\"UPDATE {system} SET status = 1 WHERE type = 'theme' and name = '%s'\", ". $value .");\n";
                $postcode .= "    system_initialize_theme_blocks(". $value .");\n";
                $code .= "    variable_set(". var_export($variable->name, true) .", ". $value .");\n";
                break;
            default:
                $code .= "    variable_set(". var_export($variable->name, true) .", ". $value .");\n";
                break;
        }
    }

    $code .= "\n";

    // node types
    if ($form_values['export_nodetypes']) {
        $code .= "/************************************************************\n";
        $code .= "*                         NODE TYPES                        *\n";
        $code .= "************************************************************/\n";
        $query_result = db_query('SELECT * FROM {node_type} WHERE custom = 1');
        $fields = array('type', 'name', 'module', 'description', 'help', 'has_title', 'title_label', 'has_body', 'body_label', 'min_word_count', 'custom', 'modified', 'locked', 'orig_type');
        while ($nodetype = db_fetch_object($query_result)) {
            $code .= '    db_query("INSERT INTO {node_type} ('. join(', ', $fields) .")\n";
            $code .= '               VALUES ('. join(', ', array_pad(array(), count($fields), "'%s'")) .")\",\n";
            foreach ($fields as $field) {
                $params[] = profile_generator_serialize($nodetype->$field);
            }
            $code .= '        '. join(',', $params) ."\n";
            $code .= '    );';
        }
        $code .= "\n";
    }

    // roles
    if ($form_values['export_roles']) {
        $code .= "/************************************************************\n";
        $code .= "*                            ROLES                          *\n";
        $code .= "************************************************************/\n";

        $code .= "    \$role_id['anonymous user'] = 1;\n";
        $code .= "    \$role_id['authenticated user'] = 2;\n";

        $query_result = db_query('SELECT * FROM {role} INNER JOIN {permission} ON {role}.rid = {permission}.rid WHERE {role}.rid > 2 ORDER BY {role}.rid');
        while ($role = db_fetch_object($query_result)) {
            $code .= "    \$rid = db_next_id('{role}_rid');\n";
            $code .= "    \$role_id[". var_export($role->name, true) ."] = \$rid;\n";
            $code .= "    db_query(\"INSERT INTO {role} (rid, name) VALUES (%d, '%s')\", \$rid, ". var_export($role->name, true) .");\n";
            $code .= "    db_query(\"INSERT INTO {permission} (rid, perm) VALUES (%d, '%s')\", \$rid, ". var_export($role->perm, true) . ");\n";
        }
        
        $code .= "\n";
    }

    // users
    if ($form_values['export_users']) {
        $code .= "/************************************************************\n";
        $code .= "*                            USERS                          *\n";
        $code .= "************************************************************/\n";
        $query_result = db_query('SELECT * FROM {users} WHERE uid>0 ORDER BY uid');
        while ($user = db_fetch_object($query_result)) {
            $pass = $user->pass;
            unset($user->uid);
            unset($user->pass);
            $code .= "    \$user = user_save(new stdClass(), ";
            $code .= profile_generator_serialize((array)$user, 6);
            $code .= ");\n";
            $code .= "    db_query(\"UPDATE {users} SET pass='%s' WHERE uid=%d\", ". profile_generator_serialize($pass) . ", \$user->uid);\n";
            $code .= "    \$user_id[". var_export($user->name, true) ."] = \$user->uid;\n";
        }
        $code .= "\n";
    }

    if ($form_values['export_users'] && $form_values['export_roles']) {
        $code .= "/************************************************************\n";
        $code .= "*                   USERS <=> ROLES MAPPING                 *\n";
        $code .= "************************************************************/\n";
        $query_result = db_query('SELECT {users}.name AS user, {role}.name AS role FROM {users} INNER JOIN {users_roles} ON {users}.uid={users_roles}.uid INNER JOIN {role} ON {role}.rid={users_roles}.rid;');
        while ($role = db_fetch_object($query_result)) {
            $code .= "    db_query(\"INSERT INTO {users_roles} (uid, rid) VALUES (%d, %d)\", \$user_id[". var_export($role->user, true) ."], \$role_id[". var_export($role->role, true) ."]);\n";
        }
        $code .= "\n";
    }

    if ($form_values['export_menus']) {
        $code .= "/************************************************************\n";
        $code .= "*                            MENUS                          *\n";
        $code .= "************************************************************/\n";
        $code .= "\n";
        $code .=  "    while ( db_next_id('{menu}_mid') < 2) {}\n\n";

        $code .= "    // first the primary links\n";
        $code .= "    ${profile_name}_profile_install_menu(2, ". profile_generator_serialize(profile_generator_walk_menu(2)) . ");\n";

        $code .= "    ${profile_name}_profile_install_menu(0, ". profile_generator_serialize(profile_generator_walk_menu(0, array(1, 2))) .");\n";
        $code .= "\n";
    }

    if ($form_values['export_aliases']) {
        $code .= "/************************************************************\n";
        $code .= "*                         URL ALIASES                       *\n";
        $code .= "************************************************************/\n";
        $code .= "\n";
        $code .= profile_generator_generate_inserts('url_alias', db_query('SELECT src,dst FROM {url_alias}'));
    }

    if ($form_values['export_blocks']) {
        $code .= "/************************************************************\n";
        $code .= "*                           BLOCKS                          *\n";
        $code .= "************************************************************/\n";
        $code .= "\n";
        $query_result = db_query('SELECT * FROM {blocks}');
        $block_fields = array('module', 'delta', 'theme', 'status', 'weight', 'region', 'custom', 'throttle', 'visibility', 'pages', 'title');
        while ($block = db_fetch_object($query_result)) {
            $code .= "    db_query(\n";
            $code .= "        \"INSERT INTO {blocks} (module,delta,theme,status,weight,region,custom,throttle,visibility,pages,title)\n";
            $code .= "        VALUES ('%s', '%s', '%s', %d, %d, '%s', %d, %d, %d, '%s', '%s')\",\n";
            $params = array();
            foreach ($block_fields as $field) {
                if ($block->module == 'menu' && $field == 'delta') {
                    $params[] = "\$menu[". profile_generator_serialize($block->$field) ."]";
                }
                else {
                    $params[] = profile_generator_serialize($block->$field);
                }
            }
            $code .= "        ". join(', ', $params) ."\n";
            $code .= "    );\n";

            if ($block->module == 'block') {
                $code .= "    db_query(\"INSERT INTO {boxes} (bid, body, info, format) VALUES (%d, '%s', '%s', '%s')\",\n";
                $box = db_fetch_object(db_query('SELECT * FROM {boxes} WHERE bid=%d', $block->delta));
                $code .= "        ". profile_generator_serialize($box->bid) .",\n";
                $code .= "        ". profile_generator_serialize($box->body) .",\n";
                $code .= "        ". profile_generator_serialize($box->info) .",\n";
                $code .= "        ". profile_generator_serialize($box->format) ."\n";
                $code .= "    );\n";
            }
        }
        $query_result = db_query('SELECT * FROM {blocks_roles} INNER JOIN {role} ON {role}.rid={blocks_roles}.rid');
        while ($block_role = db_fetch_object($query_result)) {
            $code .= "    db_query(\n";
            $code .= "        \"INSERT INTO {blocks_roles} (module,delta,rid) VALUES ('%s', '%s', %d)\",\n";
            $code .= "        ". profile_generator_serialize($block_role->module) .", ";
            $code .= profile_generator_serialize($block_role->delta) . ", ";
            $code .= "\$role_id[". profile_generator_serialize($block_role->name) ."]\n";
            $code .= "    );\n";
        }
        $code .= "\n";
    }

    $code .= profile_generator_export_nodes($form_values);

    $code .= "\n$postcode\n";
    $code .= "    return;\n";
    $code .= "}\n\n";

    if ($form_values['export_menus']) {
        $code .= "function ${profile_name}_profile_install_menu(\$pid, \$menu) {\n";
        $code .= "    foreach ( \$menu as \$item) {\n";
        $code .= "        \$mid = db_next_id('{menu}_mid');\n";
        $code .= "        db_query(\"INSERT INTO {menu} (mid, pid, path, title, description, weight, type) VALUES (%d,%d,'%s','%s','%s', %d, %d)\",\n";
        $code .= "                 \$mid, \$pid, \$item['path'], \$item['title'], \$item['description'], \$item['weight'], \$item['type']);\n";
        $code .= "        ${profile_name}_profile_install_menu(\$mid, \$item['children']);\n";
        $code .= "    }\n";
        $code .= "}\n\n";
    }

    $code .= "?>\n";

    if ($form_values['op'] == t('Download')) {
        header('Content-type: text/plain');
        header('Content-Disposition: attachment; filename="' . $profile_name . '.profile"');
        echo $code;
    }
    else {
        echo theme('page', '<pre><code language="php">' . highlight_string($code, true) . '</code></pre>');
    }

    return;
}

function profile_generator_export_nodes($form_values) {
    
    $output = '';
    $output .= "/************************************************************\n";
    $output .= "*                       EXPORTING NODES                     *\n";
    $output .= "************************************************************/\n";

    $query_result = db_query('SELECT * FROM {node_type}');
    while ($nodetype = db_fetch_object($query_result)) {
        if ($nodetype->custom && $form_values['node_' . $nodetype->type]) {
            $output .= "    // exporting nodes of type: " . $nodetype->name . "\n";
            $output .= profile_generator_generate_inserts('node', db_query("SELECT * FROM {node} WHERE type='%s'", $nodetype->type));
            $output .= profile_generator_generate_inserts('node_revisions', db_query("SELECT {node_revisions}.* FROM {node_revisions} INNER JOIN {node} ON {node_revisions}.nid = {node}.nid  WHERE {node}.type='%s'", $nodetype->type));
        }
    }
    return $output;
}

function profile_generator_generate_inserts($table, $result, $spaces = 4) {
    $output = '';
    while ($row = db_fetch_array($result)) {
        $output .= profile_generator_generate_insert($table, $row, $spaces) . "\n";
    }
    return $output;
}

function profile_generator_generate_insert($table, $data, $spaces = 4) {
    $spaces = str_repeat(' ', $spaces);
    $query = $spaces . "db_query(\n${spaces}    \"INSERT INTO {" . $table . "} (";
    $query .= join(',',array_keys($data));
    $query .= ")\n${spaces}    VALUES (";
    $query .= join(',',array_pad(array(), count($data), "'%s'"));
    $query .= ")\",\n";
    $params = array();
    foreach ($data as $value) {
        $params[] = profile_generator_serialize($value);
    }
    $query .= $spaces . '    ' . join(',', $params) . "\n";
    $query .= $spaces . ');';
    return $query;
}

function profile_generator_walk_menu($parent_id, $skip_mids = array()) {
    $menu = array();

    $query_result = db_query('SELECT * FROM {menu} WHERE pid=%d', $parent_id);
    while ($item = db_fetch_object($query_result)) {
        $item = (array) $item;
        if ( in_array($item['mid'], $skip_mids)) {
            continue;
        }
        $item['children'] = profile_generator_walk_menu($item['mid']);
        unset($item['mid']);
        unset($item['pid']);
        $menu[] = $item;
    }

    return $menu;
}

function profile_generator_module_list() {
    $modules = array();
    $module_cache = module_rebuild_cache();

    foreach ($module_cache as $module) {
        if ( ! $module->status) {
            continue;
        }

        $modules[] = array(
            'deps' => profile_generator_module_dependencies($module_cache, $module->name),
            'name' => $module->name,
        );
    }
    
    for ( $i = 0; $i < count($modules); $i++) {
        for ( $j = 0; $j < count($modules) - 1; $j++) {
            if ($i == $j) {
                continue;
            }
            if ( in_array($modules[$i]['name'], $modules[$j]['deps'])) {
                $tmp = $modules[$j];
                $modules[$j] = $modules[$i];
                $modules[$i] = $tmp;
            }
        }
    }

    return array_map(create_function('$a', 'return $a["name"];'), $modules);
}

function profile_generator_module_dependencies($module_list, $module) {
    $deps = $module_list[$module]->info['dependencies'];

    if ( !is_array($deps)) {
        $deps = array();
    }

    foreach ($deps as $dep) {
        $deps = array_merge($deps, profile_generator_module_dependencies($module_list, $dep));
    }

    return $deps;
}
